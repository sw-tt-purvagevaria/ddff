package com.avnet.smartshelf.webservice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.security.cert.CertificateException;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

public class RestClient {

    private static ApiInterface restClient;


    static {
        setupRestClient();
    }

    /*private RestClient() {
    }*/

    public static ApiInterface get() {
        return restClient;
    }

    public static void setupRestClient() {
        Gson gson = new GsonBuilder()
                .setLenient()
                .create();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(ApiInterface.AUTH_BASEURL)
                .client(getUnsafeOkHttpClient().build())
                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build();

        restClient = retrofit.create(ApiInterface.class);
    }

    public static ApiInterface getRestClient(String baseUrl) {
        Gson gson = new GsonBuilder()
                .setLenient()
                .create();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(baseUrl)
                .client(getUnsafeOkHttpClientChagePass().build())
                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build();

        return retrofit.create(ApiInterface.class);

    }


    public static OkHttpClient.Builder getUnsafeOkHttpClient() {

        try {
            // Create a trust manager that does not validate certificate chains
            final TrustManager[] trustAllCerts = new TrustManager[]{
                    new X509TrustManager() {
                        @Override
                        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        @Override
                        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        @Override
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return new java.security.cert.X509Certificate[]{};
                        }
                    }
            };


            // Install the all-trusting trust manager
            final SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

            // Create an ssl socket factory with our all-trusting manager
            final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

            OkHttpClient.Builder builder = new OkHttpClient.Builder();

            HttpLoggingInterceptor interceptorBody = new HttpLoggingInterceptor();

            builder.addInterceptor(chain -> {
                Request request;

               /* if (Singleton.singleton.getPreference(Helper.BEARER_TOKEN, "") != null && !Singleton.singleton.getPreference(Helper.BEARER_TOKEN, "").equalsIgnoreCase("")) {
                    request = chain.request().newBuilder().addHeader("Authorization", "Bearer " + Singleton.singleton.getPreference(Helper.BEARER_TOKEN, "")).build();
                } else {
                    request = chain.request().newBuilder().build();
                }*/
                request = chain.request().newBuilder().build();
                return chain.proceed(request);
            });

           /* builder.readTimeout(1, TimeUnit.HOURS)
                    .connectTimeout(1, TimeUnit.HOURS)
                    .authenticator(new TokenAuthenticator());*/


            interceptorBody.setLevel(HttpLoggingInterceptor.Level.NONE);

            builder.addInterceptor(interceptorBody);

            builder.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0]);
            builder.hostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });
            return builder;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static OkHttpClient.Builder getUnsafeOkHttpClientChagePass() {

        try {
            // Create a trust manager that does not validate certificate chains
            final TrustManager[] trustAllCerts = new TrustManager[]{
                    new X509TrustManager() {
                        @Override
                        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        @Override
                        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        @Override
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return new java.security.cert.X509Certificate[]{};
                        }
                    }
            };


            // Install the all-trusting trust manager
            final SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

            // Create an ssl socket factory with our all-trusting manager
            final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

            OkHttpClient.Builder builder = new OkHttpClient.Builder();

            HttpLoggingInterceptor interceptorBody = new HttpLoggingInterceptor();

            builder.addInterceptor(chain -> {
                Request request;

               /* if (Singleton.singleton.getPreference(Helper.BEARER_TOKEN, "") != null && !Singleton.singleton.getPreference(Helper.BEARER_TOKEN, "").equalsIgnoreCase("")) {
                    request = chain.request().newBuilder().addHeader("Authorization", "Bearer " + Singleton.singleton.getPreference(Helper.BEARER_TOKEN, "")).build();
                } else {*/
                    request = chain.request().newBuilder().build();
//                }

                return chain.proceed(request);
            });

            builder.readTimeout(1, TimeUnit.HOURS)
                    .connectTimeout(1, TimeUnit.HOURS);

                interceptorBody.setLevel(HttpLoggingInterceptor.Level.BODY);

            builder.addInterceptor(interceptorBody);

            builder.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0]);
            builder.hostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });
            return builder;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
